///usr/bin/env jbang "$0" "$@" ; exit $? 

//JAVA 17

//DEPS org.testcontainers:testcontainers-bom:1.17.6@pom
//DEPS org.testcontainers:testcontainers
//DEPS org.testcontainers:junit-jupiter
//DEPS org.junit:junit-bom:5.9.1@pom
//DEPS org.junit.jupiter:junit-jupiter-api
//DEPS org.junit.jupiter:junit-jupiter-engine
//DEPS org.junit.platform:junit-platform-launcher
//DEPS org.assertj:assertj-core:3.23.1

import com.github.dockerjava.api.model.ExposedPort;
import org.junit.jupiter.api.Test;
import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
import org.junit.platform.launcher.core.LauncherFactory;
import org.junit.platform.launcher.listeners.LoggingListener;
import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import static java.lang.System.out;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;

// Run with './jbang test.java'. Edit with './jbang edit --open=[editor] test.java' where [editor] is your editor, for
// example, 'idea' or 'code'.
@Testcontainers
class test {

	@Container
	static GenericContainer container = new GenericContainer<>(DockerImageName.parse("myimage"))
			.withExposedPorts(80);

	@Test
	void testNginxIsInstalled() throws IOException, InterruptedException {
		var statusCmd = container.execInContainer("dpkg", "-s", "nginx");

		assertThat(statusCmd.getExitCode()).isEqualTo(0);
		assertThat(statusCmd.getStdout()).contains("Status: install ok installed");
	}

	@Test
	void testNginxWorkersDoNotRunAsRoot() throws IOException, InterruptedException {
		var masterPidCmd = container.execInContainer("/bin/bash", "-c",
				"ps -ouser=,pid= -C nginx | awk '($1==\"root\"){print $2}'");
		var masterPid = Integer.parseInt(masterPidCmd.getStdout().trim());

		var workersUserCmd = container.execInContainer("/bin/bash", "-c",
				String.format("ps -ouser= --ppid %d | uniq", masterPid));

		assertThat(workersUserCmd.getStdout().trim()).isEqualTo("www-data");
	}

	@Test
	void testNginxSaysWelcome() throws IOException, InterruptedException {
		var client = HttpClient.newBuilder()
				.version(HttpClient.Version.HTTP_2)
				.followRedirects(HttpClient.Redirect.NORMAL)
				.connectTimeout(Duration.ofSeconds(5))
				.build();

		var request = HttpRequest.newBuilder()
				.uri(URI.create(String.format("http://%s:%d/", container.getHost(), container.getFirstMappedPort())))
				.timeout(Duration.ofSeconds(5))
				.GET()
				.build();

		var response = client.send(request, HttpResponse.BodyHandlers.ofString());

		assertThat(response.statusCode()).isEqualTo(200);
		assertThat(response.body()).contains("Welcome to nginx!");
	}

	@Test
	void testContainerExposesHttpOnly() {
		var bindings = container.getContainerInfo().getHostConfig().getPortBindings().getBindings();

		assertThat(bindings).containsOnlyKeys(ExposedPort.tcp(80));
	}

	// Boilerplate generated by ./jbang init --template=junit@jbangdev test.java, extended with exit code adjustment.
	public static void main(final String... args) {
		var request = LauncherDiscoveryRequestBuilder.request()
				.selectors(selectClass(test.class))
				.build();

		var launcher = LauncherFactory.create();
		var logListener = LoggingListener.forBiConsumer((t, m) -> {
			System.out.println(m.get());
			if (t != null) {
				t.printStackTrace();
			}
		});
		var execListener = new SummaryGeneratingListener();
		launcher.registerTestExecutionListeners(execListener, logListener);
		launcher.execute(request);
		execListener.getSummary().printTo(new java.io.PrintWriter(out));

		if (execListener.getSummary().getTotalFailureCount() > 0) {
			System.exit(1);
		}

		System.exit(0);
	}
}
